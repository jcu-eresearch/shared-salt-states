{% from "jcu/shibboleth/providers.yaml" import shibboleth_providers with context %}
{% set shibboleth = pillar['shibboleth'] %}
<SPConfig xmlns="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:conf="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"    
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    clockSkew="180">

    <RequestMapper type="Native">
        <RequestMap applicationId="default">
            {% for host, host_values in shibboleth['hosts'].items() %}
            <Host name="{{ host }}"
                {% if 'applicationId' in host_values %}
                  applicationId="{{ host_values['applicationId'] }}"
                {% endif %}
                  authType="{{ host_values.get('authType', 'shibboleth') }}"
                  redirectToSSL="{{ host_values.get('redirectToSSL', '443') }}"> 
                {% for path, path_values in host_values['paths'].items() %}
                <Path name="{{ path }}"
                      requireSession="{{ path_values['requireSession'] }}" />
                {% endfor %}
            </Host>
            {% endfor %}
        </RequestMap>
    </RequestMapper>

    <ApplicationDefaults id="default"
                         policyId="default" 
                         entityID="{{ shibboleth['entityID'] }}"
                         REMOTE_USER="{{ shibboleth.get('REMOTE_USER', 'eppn persistent-id targeted-id') }}">

        <!--
        Controls session lifetimes, address checks, cookie handling, and the protocol handlers.
        You MUST supply an effectively unique handlerURL value for each of your applications.
        The value defaults to /Shibboleth.sso, and should be a relative path, with the SP computing
        a relative value based on the virtual host. Using handlerSSL="true", the default, will force
        the protocol to be https. You should also add a cookieProps setting of "; path=/; secure"
        in that case. Note that while we default checkAddress to "false", this has a negative
        impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.
        -->
        <Sessions lifetime="28800" timeout="3600" checkAddress="false" 
                  relayState="ss:mem" handlerSSL="true"
                  handlerURL="/Shibboleth.sso"> 

            <!--
            Configures SSO for a default IdP. To allow for >1 IdP, remove
            entityID property and adjust discoveryURL to point to discovery service.
            (Set discoveryProtocol to "WAYF" for legacy Shibboleth WAYF support.)
            You can also override entityID on /Login query string, or in RequestMap/htaccess.
            -->
            <SSO discoveryProtocol="SAMLDS"
                discoveryURL="{{ shibboleth_providers[shibboleth['providers'][0]]['discoveryURL'] }}">
              SAML2 SAML1
            </SSO>

            <!-- SAML and local-only logout. -->
            <Logout>SAML2 Local</Logout>

            {% for provider in shibboleth['providers'] %}
            <SessionInitiator type="Chaining" Location="/ds-{{ provider }}" id="ds-{{ provider }}" relayState="cookie">
                <SessionInitiator type="SAML2" acsIndex="1" template="bindingTemplate.html"/>
                <SessionInitiator type="Shib1" acsIndex="5"/>
                <SessionInitiator type="SAMLDS" URL="{{ shibboleth_providers[provider]['discoveryURL'] }}"/>
            </SessionInitiator>
            {% endfor %}

            <!-- Extension service that generates "approximate" metadata based on SP configuration. -->
            <Handler type="MetadataGenerator" Location="/Metadata"
                     signing="false"/>

            <!-- Status reporting service. -->
            <Handler type="Status" Location="/Status" acl="127.0.0.1"/>

            <!-- Session diagnostic service. -->
            <Handler type="Session" Location="/Session"
                     showAttributeValues="false"/>

            <!-- JSON feed of discovery information. -->
            <Handler type="DiscoveryFeed" Location="/DiscoFeed"/>
        </Sessions>

        <!--
        Allows overriding of error template information/filenames. You can
        also add attributes with values that can be plugged into the templates.
        -->
        <Errors supportContact="{{ shibboleth.get('supportContact', 'eresearch REPLACEWITHAT jcu.edu.au')}}"
                logoLocation="/shibboleth-sp/logo.png"
                styleSheet="/shibboleth-sp/main.css"/>
        
        {% for provider in shibboleth['providers'] %}
        {% set metadata_provider = shibboleth_providers[provider]['metadataProvider'] %}
        <MetadataProvider
            type="XML"
            uri="{{ metadata_provider['uri'] }}"
            backingFilePath="{{ metadata_provider['backingFilePath'] }}" reloadInterval="7200">
            <MetadataFilter type="RequireValidUntil" maxValidityInterval="2419200"/>
            <MetadataFilter type="Signature" certificate="{{ shibboleth_providers[provider]['certificate']['name'] }}"/>
        </MetadataProvider>
        {% endfor %}

        <!-- Map to extract attributes from SAML assertions. -->
        <AttributeExtractor type="XML" validate="true" path="attribute-map.xml" reloadChanges="true"/>
        
        <!-- Use a SAML query if no attributes are supplied during SSO. -->
        <AttributeResolver type="Query" subjectMatch="true"/>

        <!-- Default filtering policy for recognized attributes, lets other data pass. -->
        <AttributeFilter type="XML" validate="true" path="attribute-policy.xml"/>

        <!-- Simple file-based resolver for using a single keypair. -->
        <CredentialResolver type="File" key="sp-key.pem" certificate="sp-cert.pem"/>

        <!--
        The default settings can be overridden by creating ApplicationOverride elements (see
        the https://spaces.internet2.edu/display/SHIB2/NativeSPApplicationOverride topic).
        Resource requests are mapped by web server commands, or the RequestMapper, to an
        applicationId setting.
        
        Example of a second application (for a second vhost) that has a different entityID.
        Resources on the vhost would map to an applicationId of "admin":
        -->
        <!--
        <ApplicationOverride id="admin" entityID="https://admin.example.org/shibboleth"/>
        -->

    </ApplicationDefaults>
    
    <!-- Policies that determine how to process and authenticate runtime messages. -->
    <SecurityPolicyProvider type="XML" validate="true" path="security-policy.xml"/>

    <!-- Low-level configuration about protocols and bindings available for use. -->
    <ProtocolProvider type="XML" validate="true" reloadChanges="false" path="protocols.xml"/>


</SPConfig>
